{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"알고리즘","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyM05qN9M/021yiYNRwb0BjQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"PaRepSUSxgbj"},"source":["# N으로 나눈 나머지와 몫이 같은 자연수의 합"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M2m4NDEOzlBB","executionInfo":{"status":"ok","timestamp":1624971213306,"user_tz":-540,"elapsed":2359,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"ce1c40b5-6ab6-49d9-93a7-479ab8ea8b62"},"source":["N = int(input(\"자연수 N 입력 : \"))\n","\n","sum = int((N * (N-1) * (N+1)) / 2)\n","\n","print(N, \"으로 나눈 몫과 나머지가 같은 자연수의 합 :\", sum)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["자연수 N 입력 : 5\n","5 으로 나눈 몫과 나머지가 같은 자연수의 합 : 60\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c4rBkd1b1O7h","executionInfo":{"status":"ok","timestamp":1624975260806,"user_tz":-540,"elapsed":3123,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"d71b314f-7be3-47ab-f99d-f0d6c33992e1"},"source":["N = int(input(\"자연수 N 입력 : \"))\n","sum = 0\n","A = 0\n","\n","for i in range(1, N):\n","  A = (i * N) + i\n","  sum += A\n","\n","print(sum)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["자연수 N 입력 : 2\n","3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xtkiUZ1nxkLZ"},"source":["# 공사장"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qrEg-hUbEqEr","executionInfo":{"status":"ok","timestamp":1625187800729,"user_tz":-540,"elapsed":13192,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"b1d61d26-7d2f-42a9-99ce-07e8ca4fe060"},"source":["a, b, R = map(int, input(\"공사현장의 x좌표(a), y좌표(b), 공사장 소음거리 : \").split())\n","N = int(input(\"그늘의 수 : \"))\n","\n","for i in range(1, N+1):\n","  x_i, y_i = map(int, input(\"그늘의 x좌표, y좌표 : \").split())\n","\n","  if (((x_i - a)**2) + ((y_i - b)**2)) >= R**2:\n","    print(\"silent\")\n","  else:\n","    print(\"noisy\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["공사현장의 x좌표(a), y좌표(b), 공사장 소음거리 : 20 50 10\n","그늘의 수 : 3\n","그늘의 x좌표, y좌표 : 10 10\n","silent\n","그늘의 x좌표, y좌표 : 50 50\n","silent\n","그늘의 x좌표, y좌표 : 22 5\n","silent\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-FIpf7gtxnm5"},"source":["# 약수 구하기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tAcR-_atoLTF","executionInfo":{"status":"ok","timestamp":1625188692491,"user_tz":-540,"elapsed":2097,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"809cd6c5-dcf6-496c-8b4b-7cc2c0f1ab37"},"source":["N = int(input(\"자연수 입력 : \"))\n","\n","list = []\n","for a in range(1, N+1):\n","  if N % a == 0:\n","    list.append(a)\n","\n","print(list)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["자연수 입력 : 5\n","[1, 5]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EqGhZ4mfqMpf"},"source":["##### 약수 구하기(효율적)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J56kEVl_z7zp","executionInfo":{"status":"ok","timestamp":1625189285762,"user_tz":-540,"elapsed":2547,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"95f85d04-1c29-4bad-f9f6-7c3925144e96"},"source":["num = int(input(\"정수 입력 : \"))\n","\n","sqrt_num = int(num ** (1/2))\n","\n","front_list = []\n","back_list = []\n","\n","for i in range(1, sqrt_num+1):\n","  if num % i == 0:\n","    front_list.append(i)\n","    if i != int(num/i):\n","      back_list.append(int(num/i))\n","\n","print(front_list + back_list[::-1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["정수 입력 : 100\n","[1, 2, 4, 5, 10, 20, 25, 50, 100]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-IlM2G7mxpuw"},"source":["# 최댓값, 최솟값 구하기"]},{"cell_type":"markdown","metadata":{"id":"rjS1Epe0qKW2"},"source":["##### 1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAfGg4SqrYsD","executionInfo":{"status":"ok","timestamp":1625188273052,"user_tz":-540,"elapsed":318,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"d70e4469-9efb-4d02-aaf3-84117c3ab5ba"},"source":["def print_list(list):\n","\n","  return list\n","\n","def sort(list):\n","  for i in range(len(list)):\n","    for j in range(i, len(list)):\n","      if list[i] < list[j]:\n","        list[i], list[j] = list[j], list[i]\n","\n","  return list[0], list[-1]\n","\n","print(print_list([1, 2, 100, 3, 30]))\n","print(sort([1, 2, 100, 3, 30]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 2, 100, 3, 30]\n","(100, 1)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2sPFSD8xqJH7"},"source":["##### 2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kx_i4CUBwDKD","executionInfo":{"status":"ok","timestamp":1625188446958,"user_tz":-540,"elapsed":5504,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"d47d9507-b995-4ffe-aacf-25683908eb6a"},"source":["list = []\n","for i in range(5):\n","  N1 = int(input(\"정수 입력 : \"))\n","\n","list.extend([N1, N2, N3, N4, N5])\n","print(list)\n","\n","for i in range(len(list)):\n","  for j in range(i, len(list)):\n","    if list[j] > list[i]:\n","      list[j], list[i] = list[i], list[j]\n","\n","list[0], list[-1]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["정수 입력 : 1\n","정수 입력 : 2\n","정수 입력 : 100\n","정수 입력 : 3\n","정수 입력 : 30\n","[30, 2, 100, 3, 30]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(100, 2)"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"JJKzhxGOqGg8"},"source":["##### 최댓값, 최솟값 구하기(효율적)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6bFZV_I1OdJ","executionInfo":{"status":"ok","timestamp":1625189742504,"user_tz":-540,"elapsed":4720,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"b0488b21-6b10-41c1-e25c-c5d4d98098de"},"source":["num_list = list(map(int, input(\"정수 입력 : \").split()))\n","\n","max = num_list[0]\n","min = num_list[0]\n","\n","for num in num_list:\n","  if max < num:\n","    max = num\n","  if min > num:\n","    min = num\n","\n","print(\"최댓값 :\", max)\n","print(\"최솟값 :\", min)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["정수 입력 : 1 2 100 3 30\n","최댓값 : 100\n","최솟값 : 1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5cXjZKCHxMom"},"source":["# 정수를 저장하는 스택\n","#### 입력으로 주어지는 명령을 처리하는 프로그램"]},{"cell_type":"markdown","metadata":{"id":"74Hga7iup8L9"},"source":["##### 내 코드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jpcFJvVvlFk_","executionInfo":{"status":"ok","timestamp":1625840064751,"user_tz":-540,"elapsed":2477,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"1157faa5-3a77-4be8-e624-4a9190113750"},"source":["list = []\n","\n","def process(command):\n","  \n","  if command[0] == 'push':\n","    list.append(command[1])\n","\n","  elif command[0] == 'pop':\n","    if len(list) == 0:\n","      print(-1)\n","    else:\n","      print(list[-1])\n","      del list[-1]\n","\n","  elif command[0] == 'size':\n","    print(len(list))\n","\n","  elif command[0] == 'empty':\n","    if len(list) == 0:\n","       print(1)\n","    elif len(list) != 0:\n","       print(0)\n","\n","  elif command[0] == 'top':\n","    if len(list) == 0:\n","       print(-1)\n","    elif len(list) != 0:\n","      print(list[-1])\n","\n","n = int(input('명령 개수 입력: '))\n","\n","for i in range(n):\n","  command = input().split()\n","  process(command)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["명령 개수 입력: 1\n","pop\n","-1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WBJPElNZp6Y9"},"source":["##### 강사님 코드"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-P-P-OT01wYg","executionInfo":{"status":"ok","timestamp":1626530464357,"user_tz":-540,"elapsed":5925,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"438b1905-d617-4e86-cff8-9b50297a2826"},"source":["def run(cmd, stack):\n","  cmd_type = cmd[0]\n","\n","  if cmd_type == \"push\":\n","    _, num = cmd\n","    stack.append(int(num))\n","\n","  elif cmd_type == \"pop\":\n","    if len(stack) > 0:\n","      print(stack.pop())\n","    else:\n","      print(-1)\n","\n","    # try:\n","    #     print(stack.pop())\n","    # except IndexError:\n","    #     print(-1)\n","\n","  elif cmd_type == \"size\":\n","    print(len(stack))\n","\n","  elif cmd_type == \"empty\":\n","    if len(stack) > 0:\n","      print(0)\n","    else:\n","      print(1)\n","          \n","  elif cmd_type == \"top\":\n","    if len(stack) > 0:\n","      print(stack[-1])\n","    else:\n","      print(-1)\n","\n","  return stack\n","\n","stack = []\n","n = int(input())\n","\n","for _ in range(n):\n","  # \"push 2\".split() => [\"push\", \"2\"]\n","  # \"size\".split() => [\"size\"]\n","  # .split(\" \")\n","  command = input().split()\n","  run(command, stack)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n","push 1\n","size\n","1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jp_qkvoqp1Mw"},"source":["##### 클래스 사용"]},{"cell_type":"code","metadata":{"id":"GqIqDhyL5gJg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626578585105,"user_tz":-540,"elapsed":58692,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"cbc8bd47-2018-4ea3-b263-00fe7adcfa52"},"source":["class Stack:\n","  def __init__(self, n):\n","    self.stack = [None for _ in range(n)]\n","    self.stack_size = 0\n","\n","  def push(self, num):\n","    self.stack[self.size()] = int(num)\n","    self.stack_size += 1\n","\n","  def pop(self):\n","    if self.size() > 0:\n","      last_val = self.top()\n","      self.stack_size -= 1\n","      return last_val\n","    return -1\n","\n","  def size(self):\n","    return self.stack_size\n","\n","  def empty(self):\n","    if self.size() > 0:\n","      return 0\n","    return 1\n","\n","  def top(self):\n","    if self.size() > 0:\n","      return self.stack[self.size()-1]\n","    return -1\n","\n","def run(cmd, stack_lst):\n","  cmd_type = cmd[0]\n","\n","  if cmd_type == 'push':\n","    _, num = cmd\n","    stack_lst.push(num)\n","\n","  elif cmd_type == 'pop':\n","    print(stack_lst.pop())\n","\n","  elif cmd_type == 'size':\n","    print(stack_lst.size())\n","\n","  elif cmd_type == 'empty':\n","    print(stack_lst.empty())\n","\n","  elif cmd_type == 'top':\n","    print(stack_lst.top())\n","\n","  return stack_lst\n","\n","n = int(input())\n","stack_lst = Stack(n)\n","\n","for _ in range(n):\n","  command = input().split()\n","  stack_lst = run(command, stack_lst)\n","\n","  print(\"스택: \", stack_lst.stack[:stack_lst.size()])\n","  print(\"스택 사이즈 : \", stack_lst.size())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["15\n","pop\n","-1\n","스택:  []\n","스택 사이즈 :  0\n","top\n","-1\n","스택:  []\n","스택 사이즈 :  0\n","empty\n","1\n","스택:  []\n","스택 사이즈 :  0\n","size\n","0\n","스택:  []\n","스택 사이즈 :  0\n","push 1\n","스택:  [1]\n","스택 사이즈 :  1\n","push 2\n","스택:  [1, 2]\n","스택 사이즈 :  2\n","push 3\n","스택:  [1, 2, 3]\n","스택 사이즈 :  3\n","push 4\n","스택:  [1, 2, 3, 4]\n","스택 사이즈 :  4\n","pop\n","4\n","스택:  [1, 2, 3]\n","스택 사이즈 :  3\n","pop\n","3\n","스택:  [1, 2]\n","스택 사이즈 :  2\n","top\n","2\n","스택:  [1, 2]\n","스택 사이즈 :  2\n","size\n","2\n","스택:  [1, 2]\n","스택 사이즈 :  2\n","empty\n","0\n","스택:  [1, 2]\n","스택 사이즈 :  2\n","push 5\n","스택:  [1, 2, 5]\n","스택 사이즈 :  3\n","pop\n","5\n","스택:  [1, 2]\n","스택 사이즈 :  2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wMOvyr7lylYw"},"source":["# 큐 문제"]},{"cell_type":"markdown","metadata":{"id":"F37_NDkIpdd7"},"source":["##### 내 코드\n"]},{"cell_type":"code","metadata":{"id":"H7xCREmoTCDj"},"source":["class Stack:\n","  def __init__(self, n):\n","    self.stack = [None for _ in range(n)]\n","    self.stack_size = 0\n","    self.n = n\n","    self.pu = 0\n","    self.po = 0\n","\n","  def push(self, num):\n","    self.stack[self.size()] = int(num)\n","    self.stack_size += 1\n","    self.pu += 1\n","\n","  def pop(self):\n","    if self.size() > 0:\n","      last_val = self.front()\n","      self.stack_size -= 1\n","      self.n -= 1\n","      self.po += 1\n","      return last_val\n","    return -1\n","\n","  def size(self):\n","    return self.stack_size\n","\n","  def empty(self):\n","    if self.size() > 0:\n","      return 0\n","    return 1\n","\n","  def front(self):\n","    if (self.size() > 0) & (self.pu > 0) & (self.po > self.pu):\n","      return self.stack[-self.n]\n","    else:\n","      return -1\n","\n","    #   return self.stack[-self.n - self.po]\n","\n","    # else:\n","    # push, pop 둘 다 하고 front 실행\n","    # 아무것도 안하고 front 실행\n","\n","  def back(self):\n","    if self.size() > 0:\n","      return self.stack[self.size()-1]\n","    return -1\n","\n","def run(cmd, stack_lst):\n","  cmd_type = cmd[0]\n","\n","  if cmd_type == 'push':\n","    _, num = cmd\n","    stack_lst.push(num)\n","\n","  elif cmd_type == 'pop':\n","    print(stack_lst.pop())\n","\n","  elif cmd_type == 'size':\n","    print(stack_lst.size())\n","\n","  elif cmd_type == 'empty':\n","    print(stack_lst.empty())\n","\n","  elif cmd_type == 'front':\n","    print(stack_lst.front())\n","\n","  elif cmd_type == 'back':\n","    print(stack_lst.back())\n","\n","  return stack_lst\n","\n","n = int(input())\n","stack_lst = Stack(n)\n","\n","for _ in range(n):\n","  command = input().split()\n","  stack_lst = run(command, stack_lst)\n","\n","  print(\"큐 : \", stack_lst.stack)\n","  print(\"큐 사이즈 : \", stack_lst.size())\n","  print(\"n : \", stack_lst.n)\n","  print(\"push : \", stack_lst.pu)\n","  print(\"pop : \", stack_lst.po)\n","  print(\"====================================================\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MrnWwYb7ppGC"},"source":["##### 강사님 코드\n"]},{"cell_type":"code","metadata":{"id":"mBC85vejHlSc"},"source":["def run_cmd_with_queue(cmd, queue):\n","    cmd_type = cmd[0]\n","    \n","    if cmd_type == \"push\":\n","        _, num = cmd\n","        queue.append(int(num))\n","    elif cmd_type == \"pop\":\n","        if len(queue) > 0:\n","            print(queue.pop(0))\n","        else:\n","            print(-1)\n","    elif cmd_type == \"size\":\n","        print(len(queue))\n","    elif cmd_type == \"empty\":\n","        if len(queue) > 0:\n","            print(0)\n","        else:\n","            print(1)\n","    elif cmd_type == \"front\":\n","        if len(queue) > 0:\n","            print(queue[0])\n","        else:\n","            print(-1)\n","    elif cmd_type == \"back\":\n","        if len(queue) > 0:\n","            print(queue[-1])\n","        else:\n","            print(-1)\n","    \n","    return queue\n","\n","queue = []\n","n = int(input())\n","\n","for _ in range(n):\n","    command = input().split()\n","    run_cmd_with_queue(command, queue)\n","    # queue = run_cmd_with_queue(command, queue)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f9X6nISVps61"},"source":["##### 클래스 사용"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QDa0AxuCJ_5z","executionInfo":{"status":"ok","timestamp":1626772681074,"user_tz":-540,"elapsed":36668,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"dc5bbc29-ee61-4fe5-f1ad-be1ee0c45d45"},"source":["class Queue:\n","  def __init__(self, n):\n","    self.array = [None for _ in range(n)]\n","    self.f_idk = 0\n","    self.b_idk = 0\n","\n","  def push(self, num):\n","    self.array[self.b_idk] = num\n","    self.b_idk += 1\n","  \n","  def pop(self):\n","    if self.is_empty():\n","      return -1\n","\n","    self.f_idk += 1\n","    return self.array[self.f_idk - 1]\n","\n","  def size(self):\n","    return self.b_idk - self.f_idk\n","  \n","  def empty(self):\n","    return int(self.is_empty())\n","\n","  def is_empty(self):\n","    return self.size() == 0\n","\n","  def front(self):\n","    if self.is_empty():\n","      return -1\n","    return self.array[self.f_idk]\n","\n","  def back(self):\n","    if self.is_empty():\n","      return -1\n","    return self.array[self.b_idk - 1]\n","\n","def run(command, queue_obj):\n","  cme_type = command[0]\n","\n","  if cme_type == 'push':\n","    _, num = command\n","    queue_obj.push(int(num))\n","\n","  elif cme_type == 'pop':\n","    print(queue_obj.pop())\n","\n","  elif cme_type == 'size':\n","    print(queue_obj.size())\n","\n","  elif cme_type == 'empty':\n","    print(queue_obj.empty())\n","\n","  elif cme_type == 'front':\n","    print(queue_obj.front())\n","\n","  elif cme_type == 'back':\n","    print(queue_obj.back())\n","\n","n = int(input())\n","queue_obj = Queue(n)\n","\n","for _ in range(n):\n","  run(input().split(), queue_obj)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["15\n","push 1\n","push 2\n","pop\n","1\n","pop\n","2\n","push 3\n","pop\n","3\n","front\n","-1\n","push 4\n","front\n","4\n","empty\n","0\n","size\n","1\n","front\n","4\n","back\n","4\n","pop\n","4\n","front\n","-1\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"8jLIxSdCm53W"},"source":["# 덱"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9dlOQObQm65F","executionInfo":{"status":"ok","timestamp":1626873564768,"user_tz":-540,"elapsed":46063,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"173f4340-aceb-4872-98a7-bc631e349c4f"},"source":["from collections import deque\n","\n","class StackAndQueue:\n","  def __init__(self, data_type):\n","    self.array = deque()\n","    self.data_type = data_type\n","\n","  def push(self, num):\n","    self.array.append(num)\n","\n","  def pop(self):\n","    if self.is_empty():\n","      return -1\n","\n","    if self.is_stack():\n","      return self.array.pop()\n","\n","    return self.array.popleft()\n","\n","  def size(self):\n","    return len(self.array)\n","\n","  def empty(self):\n","    return int(self.is_empty())\n","\n","  def top(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","\n","    return self.array[-1]\n","\n","  def front(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","    \n","    return self.array[0]\n","\n","  def back(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","\n","    return self.array[-1]\n","\n","  def is_empty(self):\n","    return self.size() == 0\n","\n","  def is_stack(self):\n","    return self.data_type == 'stack'\n","\n","def run(command, data_obj):\n","  cme_type = command[0]\n","\n","  if cme_type == 'push':\n","    _, num = command\n","    data_obj.push(int(num))\n","\n","  elif cme_type == 'pop':\n","    print(data_obj.pop())\n","\n","  elif cme_type == 'size':\n","    print(data_obj.size())\n","\n","  elif cme_type == 'empty':\n","    print(data_obj.empty())\n","  \n","  elif cme_type == 'top':\n","    print(data_obj.top())\n","\n","  elif cme_type == 'front':\n","    print(data_obj.front())\n","\n","  elif cme_type == 'back':\n","    print(data_obj.back())\n","\n","data_type = input()\n","n = int(input())\n","data_obj = StackAndQueue(data_type)\n","\n","for _ in range(n):\n","  run(input().split(), data_obj)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["deq\n","5\n","push 1\n","push 2\n","pop\n","1\n","front\n","2\n","back\n","2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AyZElR__PkfQ"},"source":["from collections import deque\n","\n","class StackAndQueue:\n","  def __init__(self):\n","    self.array = deque()\n","    self.data_type = data_type\n","\n","  def push(self, num):\n","    self.array.append(num)\n","\n","  def pop(self):\n","    if self.is_empty():\n","      return -1\n","\n","    if self.is_stack():\n","      return self.array.pop()\n","\n","    return self.array.popleft()\n","\n","  def size(self):\n","    return len(self.array)\n","\n","  def empty(self):\n","    return int(self.is_empty())\n","\n","  def top(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","    return self.array[-1]\n","\n","  def front(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","    return self.array[0]\n","\n","  def back(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","    return self.array[-1]\n","\n","  def is_stack(self):\n","    return self.data_type == 'stack'\n","\n","  def is_empty(self):\n","    return self.size() == 0\n","\n","# ============================================= #\n","\n","class StackAndQueue:\n","  def __init__(self, data_type):\n","    self.array = deque()\n","    self.data_type = data_type\n","\n","  def push(self, num):\n","    self.array.append(num)\n","\n","  def pop(self):\n","    if self.is_empty():\n","      return -1\n","\n","    if self.is_stack():\n","      return self.array.pop()\n","\n","    return self.array.popleft()\n","\n","  def size(self):\n","    return len(self.array)\n","\n","  def empty(self):\n","    return int(self.is_empty())\n","\n","  def top(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","\n","    return self.array[-1]\n","\n","  def front(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","    \n","    return self.array[0]\n","\n","  def back(self):\n","    if self.is_stack() or self.is_empty():\n","      return -1\n","\n","    return self.array[-1]\n","\n","  def is_empty(self):\n","    return self.size() == 0\n","\n","  def is_stack(self):\n","    return self.data_type == 'stack'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cVo74icFrcoM"},"source":["# 정렬"]},{"cell_type":"markdown","metadata":{"id":"o3n8k2BDaUhB"},"source":["##### 내 코드"]},{"cell_type":"code","metadata":{"id":"ctUPImCMrgsR"},"source":["def insertion_sort(): # 삽입정렬\n","  for i in range(1, len(num_list)):\n","    print(num_list)\n","    max_index = i\n","    for j in range(max_index):\n","      if num_list[max_index] < num_list[j]:\n","        num_list[j], num_list[max_index] = num_list[max_index], num_list[j]\n","        print(num_list)\n","  return num_list\n","\n","def selection_sort(): # 선택정렬: 처음 위치에 최솟값을 넣는다\n","  for i in range(len(num_list)):\n","\n","    min_idx = i\n","\n","    for j in range(i+1, len(num_list)):\n","      if num_list[min_idx] > num_list[j]:\n","        min_idx = j\n","    num_list[min_idx], num_list[i] = num_list[i], num_list[min_idx]\n","    print(num_list)\n","  return num_list\n","\n","def bubble_sort(): # 버블정렬: 인접한 것끼리 비교한다\n","  for i in range(len(num_list)):\n","\n","    min_idx = i\n","\n","    for j in range(i+1, len(num_list)):\n","      if num_list[j] < num_list[j-1]:\n","        min_idx = j\n","      num_list[j], num_list[j-1] = num_list[j-1], num_list[j]\n","      print(num_list)\n","  return num_list\n","\n","n = int(input())\n","num_list = []\n","\n","for _ in range(n):\n","  num = int(input())\n","  num_list.append(num)\n","\n","# insertion_sorted_list = insertion_sort()\n","# print(\"\".join(map(str, insertion_sorted_list)))\n","\n","# selection_sort_list = selection_sort()\n","# print(\"\".join(map(str, selection_sort_list)))\n","\n","bubble_sort_list = bubble_sort()\n","print(\"\".join(map(str, bubble_sort_list)))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WgZnCIcmaQgo"},"source":["##### 강사님 코드"]},{"cell_type":"code","metadata":{"id":"Zzf3a7UJmf_f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627628580286,"user_tz":-540,"elapsed":6288,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"fa74f279-8400-4e31-8b5f-ec6722943ebb"},"source":["def insertion_sort(num_list):\n","    bef_n_list = num_list.copy()\n","\n","    for idx in range(1, len(bef_n_list)):\n","        print(f\"{idx}번째 : {bef_n_list}\")\n","\n","        # 1)\n","        now_idx = idx\n","\n","        while now_idx > 0 and bef_n_list[now_idx] < bef_n_list[now_idx-1]:\n","            # t = bef_n_list[idx]\n","            # bef_n_list[idx] = bef_n_list[idx-1]\n","            # bef_n_list[idx-1] = t\n","\n","            bef_n_list[now_idx], bef_n_list[now_idx-1] = bef_n_list[now_idx-1], bef_n_list[now_idx]\n","            now_idx -= 1\n","\n","            print(bef_n_list)\n","\n","        # 2)\n","        # for now_idx in range(idx, 0, -1):\n","        #     if bef_n_list[now_idx] >= bef_n_list[now_idx-1]: # now_idx-1 = idx로 생각\n","        #         break\n","\n","        #     bef_n_list[now_idx], bef_n_list[now_idx-1] = bef_n_list[now_idx-1], bef_n_list[now_idx]\n","        #     print(bef_n_list)\n","\n","    return bef_n_list\n","\n","def selection_sort(num_list):\n","    bef_n_list = num_list.copy()\n","    \n","    # min_idx = 0\n","\n","    # for idx in range(len(bef_n_list)):\n","    #     if bef_n_list[idx] < bef_n_list[min_idx]:\n","    #         min_idx = idx\n","\n","    # bef_n_list[0], bef_n_list[min_idx] = bef_n_list[min_idx], bef_n_list[0]\n","\n","    # min_idx = 1\n","\n","    # for idx in range(1, len(bef_n_list)):\n","    #     if bef_n_list[idx] < bef_n_list[min_idx]:\n","    #         min_idx = idx\n","\n","    # bef_n_list[1], bef_n_list[min_idx] = bef_n_list[min_idx], bef_n_list[1]\n","\n","    # ...\n","\n","    # 1)\n","    for i in range(len(bef_n_list)):\n","        min_idx = i\n","\n","        for idx in range(i, len(bef_n_list)):\n","            if bef_n_list[idx] < bef_n_list[min_idx]:\n","                min_idx = idx\n","\n","    # 2)\n","    # min_val = min(bef_n_list)\n","    # min_idx = bef_n_list.index(min_val)\n","\n","    # 3)\n","\n","\n","        bef_n_list[i], bef_n_list[min_idx] = bef_n_list[min_idx], bef_n_list[i]\n","        print(bef_n_list)\n","\n","    return bef_n_list\n","\n","def bubble_sort():\n","    bef_n_list = num_list.copy()\n","\n","    # for i in range(len(bef_n_list)-0-1):\n","    #   if bef_n_list[i] > bef_n_list[i+1]:\n","    #     bef_n_list[i], bef_n_list[i+1] = bef_n_list[i+1], bef_n_list[i]\n","\n","    # for i in range(len(bef_n_list)-1-1):\n","    #   if bef_n_list[i] > bef_n_list[i+1]:\n","    #     bef_n_list[i], bef_n_list[i+1] = bef_n_list[i+1], bef_n_list[i]\n","\n","    # for i in range(len(bef_n_list)-2-1):\n","    #   if bef_n_list[i] > bef_n_list[i+1]:\n","    #     bef_n_list[i], bef_n_list[i+1] = bef_n_list[i+1], bef_n_list[i]\n","\n","    # 1)\n","    # for i in range(len(bef_n_list)):\n","    #   for j in range(len(bef_n_list)-i-1):\n","    #     if bef_n_list[j] > bef_n_list[j+1]:\n","    #       bef_n_list[j], bef_n_list[j+1] = bef_n_list[j+1], bef_n_list[j]\n","    #       print(bef_n_list)\n","\n","\n","    # 2) 선호하는 방법\n","    for i in range(len(bef_n_list), 0, -1):\n","      for j in range(i-1):\n","        if bef_n_list[j] > bef_n_list[j+1]:\n","          bef_n_list[j], bef_n_list[j+1] = bef_n_list[j+1], bef_n_list[j]\n","          print(bef_n_list)\n","\n","    return bef_n_list\n","\n","n = int(input())\n","num_list = []\n","\n","for _ in range(n):\n","    num = int(input())\n","    num_list.append(num)\n","\n","insertion_sorted_list = insertion_sort(num_list)\n","print(\" \".join(map(str, insertion_sorted_list)))\n","\n","# selection_sorted_list = selection_sort(num_list)\n","# print(\" \".join(map(str, selection_sorted_list)))\n","\n","# bubble_sorted_list = bubble_sort()\n","# print(\" \".join(map(str, bubble_sorted_list)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5\n","5\n","4\n","3\n","2\n","1\n","1번째 : [5, 4, 3, 2, 1]\n","[4, 5, 3, 2, 1]\n","2번째 : [4, 5, 3, 2, 1]\n","[4, 3, 5, 2, 1]\n","[3, 4, 5, 2, 1]\n","3번째 : [3, 4, 5, 2, 1]\n","[3, 4, 2, 5, 1]\n","[3, 2, 4, 5, 1]\n","[2, 3, 4, 5, 1]\n","4번째 : [2, 3, 4, 5, 1]\n","[2, 3, 4, 1, 5]\n","[2, 3, 1, 4, 5]\n","[2, 1, 3, 4, 5]\n","[1, 2, 3, 4, 5]\n","1 2 3 4 5\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"co1Md8IA8m1s"},"source":["# 원형 큐"]},{"cell_type":"markdown","metadata":{"id":"81ilXAlZweSU"},"source":["- 스택과 거의 동일\n","- 큐가 뒤로 이어 붙어져있는 형태\n","- pop을 두번 수행하고 push가 일어날 경우에는 값이 연속적으로 존재하게 된다\n","- 공간을 재사용하려면 주어진 공간을 넘어서게 할만큼 인덱스가 존재해야 한다\n","- 큐의 값을 임의로 지정해줘도 좋음\n","\n","- push와 pop을 어떻게 하냐에 따라 front와 rear가 가변적이다"]},{"cell_type":"markdown","metadata":{"id":"N6QRKgvNy9C5"},"source":["### 내 코드"]},{"cell_type":"code","metadata":{"id":"bv3rxERu8oec"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TnhMNvrxy_rB"},"source":["### 강사님 코드"]},{"cell_type":"code","metadata":{"id":"lYxxp1PizBAQ"},"source":["# [..., 1,2,3,4,5,6,7, ...]\n","\n","class Queue:\n","    def __init__(self, length):\n","        # self.array = [None] * n\n","        self.length = length+1\n","        self.array = [None for _ in range(length+1)] # 여분 공간에 끼워넣기 위해(공간 순환 목적)\n","        self.f_idx = 0\n","        self.b_idx = 0\n","\n","    def push(self, num):\n","        if self.is_full():\n","            return -1\n","\n","        self.array[self.b_idx] = int(num)\n","        self.b_idx = (self.b_idx + 1) % self.length\n","\n","    def pop(self):\n","        if self.is_empty():\n","            return -1\n","\n","        last_val = self.array[self.f_idx]\n","        self.array[self.f_idx] = None\n","        self.f_idx = (self.f_idx + 1) % self.length\n","        return last_val\n","    \n","    def size(self):\n","        return (self.b_idx - self.f_idx) % self.length\n","    \n","    def empty(self):\n","        return int(self.is_empty())\n","    \n","    def front(self):\n","        if self.is_empty():\n","            return -1\n","\n","        return self.array[self.f_idx]\n","    \n","    def back(self):\n","        if self.is_empty():\n","            return -1\n","\n","        return self.array[self.b_idx-1]\n","\n","    def is_empty(self):\n","        return self.size() == 0\n","\n","    def is_full(self):\n","        return self.size() == self.length-1\n","        # return (self.b_idx+1) % self.length == self.f_idx\n","        # 둘 다 가능. 마지막 다음 칸이 여분이기 때문에 꽉 찼다면 다음칸이 f_idx일 것이다\n","\n","def run_cmd_with_queue(queue_obj, command):\n","    cmd_type = command[0]\n","    \n","    if cmd_type == \"push\":\n","        _, num = command\n","        res = queue_obj.push(int(num))\n","        if res:\n","            print(res)\n","    elif cmd_type == \"pop\":\n","        print(queue_obj.pop())\n","    elif cmd_type == \"size\":\n","        print(queue_obj.size())\n","    elif cmd_type == \"empty\":\n","        print(queue_obj.empty())\n","    elif cmd_type == \"front\":\n","        print(queue_obj.front())\n","    elif cmd_type == \"back\":\n","        print(queue_obj.back())\n","\n","    print(queue_obj.f_idx)\n","    print(queue_obj.b_idx)\n","    print(queue_obj.array)\n","\n","n = int(input())\n","queue_obj = Queue(n)\n","\n","for _ in range(n):\n","    run_cmd_with_queue(queue_obj, input().split())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9b8LYNC5mLMh"},"source":["# 큐 추가 문제(1) - 카드2"]},{"cell_type":"markdown","metadata":{"id":"bnEQ2GMXmYV0"},"source":["### 내 코드"]},{"cell_type":"code","metadata":{"id":"3KnZBgctvrOy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628214604924,"user_tz":-540,"elapsed":2100,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"1267c1fe-5aa2-45c0-b427-4e7773a175f9"},"source":["from collections import deque\n","\n","N = int(input())\n","deque = deque([i for i in range(1, N+1)])\n","\n","while (len(deque) > 1):\n","  deque.popleft() # 처음 pop하기\n","  deque.append(deque.popleft()) # 두번째 pop한 수 저장하여 맨 뒤로 보내기\n","  print(deque)\n","  \n","print(deque[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5\n","deque([3, 4, 5, 2])\n","deque([5, 2, 4])\n","deque([4, 2])\n","deque([2])\n","2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7oj8qi8wzOW6"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"55qfklS3mcRL"},"source":["### 강사님 코드"]},{"cell_type":"code","metadata":{"id":"xD8s7X72md7S"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"037U1pXumSol"},"source":["# 큐 추가 문제(2) - 회전하는 큐 (순환 큐)\n","- 양방향으로 순환할 수 있다"]},{"cell_type":"markdown","metadata":{"id":"iZMFdMrfmerI"},"source":["### 내 코드"]},{"cell_type":"code","metadata":{"id":"FYq_D-QQmWfK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628208675644,"user_tz":-540,"elapsed":3823,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"2ba4eb89-fc34-47a6-d7cc-f12037086db4"},"source":["from collections import deque\n","\n","n,m = list(map(int,input().split()))\n","value = list(map(int,input().split()))\n","\n","q = deque([i+1 for i in range(n)])\n","count = 0\n","\n","for x in value:\n","  while True:\n","    if q.index(x) == 0:\n","      q.popleft() # 1번\n","      break\n","      \n","    # 위치 0과의 거리 차이로 왼쪽 or 오른쪽으로 이동할 지 결정\n","    if q.index(x) - 0 < (len(q)-1) - q.index(x): # 2번 왼쪽으로 이동하기\n","      q.append(q.popleft())\n","      count += 1\n","\n","    else: # 3번 오른쪽으로 이동하기\n","      q.appendleft(q.pop())\n","      count += 1\n","      \n","print(count)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["10 3\n","2 9 5\n","8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"WgS3VJUgmfdo"},"source":["### 강사님 코드"]},{"cell_type":"code","metadata":{"id":"O4f_B_wpmgpG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oE8qU0BvqPG9"},"source":["# 재귀\n","- 동일한 문제에 대해서 더 작은 단위의 인스턴스로 해결하는 방법이다\n"]},{"cell_type":"code","metadata":{"id":"sQckXJgjqOj9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628665349157,"user_tz":-540,"elapsed":2354,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"a360e888-01f2-4584-927d-686fe7dbf1a8"},"source":["def recursion_story(depth, max_depth):\n","    indent_block = \"____\" * depth\n","\n","    if depth == max_depth:\n","        return f\"\"\"{indent_block}\"재귀함수가 뭔가요?\"\n","{indent_block}\"재귀함수는 자기 자신을 호출하는 함수라네\"\n","{indent_block}라고 답변하였지.\"\"\"\n","\n","    return f\"\"\"{indent_block}\"재귀함수가 뭔가요?\"\n","{indent_block}\"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.\n","{indent_block}마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.\n","{indent_block}그의 답은 대부분 옳았다고 하네. 그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어.\"\n","{recursion_story(depth+1, max_depth)}\n","{indent_block}라고 답변하였지.\"\"\"\n","\n","n = int(input())\n","print(f\"어느 한 컴퓨터공학과 학생이 유명한 교수님을 찾아가 물었다.\\n{recursion_story(0, n)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["3\n","어느 한 컴퓨터공학과 학생이 유명한 교수님을 찾아가 물었다.\n","\"재귀함수가 뭔가요?\"\n","\"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.\n","마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.\n","그의 답은 대부분 옳았다고 하네. 그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어.\"\n","____\"재귀함수가 뭔가요?\"\n","____\"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.\n","____마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.\n","____그의 답은 대부분 옳았다고 하네. 그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어.\"\n","________\"재귀함수가 뭔가요?\"\n","________\"잘 들어보게. 옛날옛날 한 산 꼭대기에 이세상 모든 지식을 통달한 선인이 있었어.\n","________마을 사람들은 모두 그 선인에게 수많은 질문을 했고, 모두 지혜롭게 대답해 주었지.\n","________그의 답은 대부분 옳았다고 하네. 그런데 어느 날, 그 선인에게 한 선비가 찾아와서 물었어.\"\n","____________\"재귀함수가 뭔가요?\"\n","____________\"재귀함수는 자기 자신을 호출하는 함수라네\"\n","____________라고 답변하였지.\n","________라고 답변하였지.\n","____라고 답변하였지.\n","라고 답변하였지.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zoClOhwrwdf0"},"source":["## B진법 -> 10진법"]},{"cell_type":"markdown","metadata":{"id":"aRAs-UCSmKv_"},"source":["### iteration"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aTAE1VrBmGa3","executionInfo":{"status":"ok","timestamp":1629163428876,"user_tz":-540,"elapsed":6770,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"6e5f9b22-e0a6-4484-f0fd-10f9516f9b71"},"source":["n, b = input().split()\n","decimal_num = 0\n","\n","# char_dict = {'0': 0, '1': 1, ..., 'Y': 34, 'Z': 35}\n","# char_str = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n","\n","for i in range(len(n)):\n","    pow_num = len(n)-1-i\n","\n","    if n[i].isnumeric():\n","        num_val = int(n[i])\n","    else:\n","        num_val = ord(n[i]) - ord('A') + 10\n","\n","    decimal_num += num_val * (int(b) ** pow_num)\n","    \n","    # decimal_num += char_dict[n[i]] * int(b) ** pow_num\n","    # decimal_num += char_str.index(n[i]) * int(b) ** pow_num\n","\n","print(decimal_num)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1000 2\n","8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jDaCXv9bmTEG"},"source":["### recursion"]},{"cell_type":"code","metadata":{"id":"kxIq01Mi_SFd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629163475217,"user_tz":-540,"elapsed":2729,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"6fd07d09-20b6-4547-d1de-ab4006a4ea7a"},"source":["def decimal_conv(idx, before_num_str, before_cipher_num):\n","    if idx == len(before_num_str):\n","        return 0\n","\n","    pow_num = len(before_num_str)-1-idx\n","\n","    if before_num_str[idx].isdigit():\n","        num_val = int(before_num_str[idx])\n","    else:\n","        num_val = ord(before_num_str[idx]) - ord('A') + 10\n","    \n","    return num_val * (before_cipher_num ** pow_num) + decimal_conv(idx+1, before_num_str, before_cipher_num)\n","\n","n, b = input().split()\n","\n","print(decimal_conv(0, n, int(b)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1000 2\n","8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sHgr4p1_tu62"},"source":["### recursion - dict"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xs4Ni2Gwovww","executionInfo":{"status":"ok","timestamp":1629163541557,"user_tz":-540,"elapsed":4984,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"b5091659-1071-47c7-93d0-a3952c2c59a0"},"source":["def decimal_conv_dict(idx, before_num_str, before_cipher_num, char_dict):\n","    if idx == len(before_num_str):\n","        return 0\n","\n","    pow_num = len(before_num_str)-1-idx\n","\n","    return char_dict[before_num_str[idx]] * (before_cipher_num ** pow_num) + decimal_conv_dict(idx+1, before_num_str, before_cipher_num, char_dict)\n","\n","n, b = input().split()\n","\n","char_dict = {}\n","\n","for i in range(0, 36):\n","    if i < 10:\n","        char_dict[str(i)] = i\n","    else:\n","        char_dict[chr(i + ord('A') - 10)] = i\n","\n","print(decimal_conv_dict(0, n, int(b), char_dict))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1000 2\n","8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"bZ5Cp_gcwlaj"},"source":["## 10진법 -> B진법"]},{"cell_type":"markdown","metadata":{"id":"lOfuGNMlzlR5"},"source":["### iteration"]},{"cell_type":"code","metadata":{"id":"CJmPbyESwuJv"},"source":["n, b = map(int, input().split())\n","result_list = []\n","\n","# q, r = divmod(n, b) # 10 2, 5 0\n","# result_list.append(r) # 0\n","\n","# q, r = divmod(q, b) # 5 2, 2 1\n","# result_list.append(r) # 1\n","\n","# q, r = divmod(q, b) # 2 2, 1 0\n","# result_list.append(r) # 0\n","\n","# q, r = divmod(q, b) # 1 2, 0 1\n","# result_list.append(r) # 1\n","\n","# ...\n","#\n","\n","char_num_map = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n","\n","q = n\n","while q > 0:\n","    # q = q // b\n","    # r = q % b\n","    q, r = divmod(q, b)\n","    \n","    # 1)\n","    if r >= 10:\n","        result_list.append(chr(ord('A') + (r - 10)))\n","    else:\n","        result_list.append(str(r))\n","\n","    # 2)\n","    # result_list.append(char_num_map[r])\n","\n","print(\"\".join(result_list[::-1]))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D1vk6cez0zzf"},"source":["### recursion\n","- ord : 문자를 아스키로\n","- chr : 아스키를 문자로"]},{"cell_type":"code","metadata":{"id":"k704UdE8041d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629267813047,"user_tz":-540,"elapsed":2023,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"ef5aff7a-c408-4552-b871-168aa4b610f9"},"source":["def convert_from_dec(q, b):\n","  if q == 0:\n","    return \"\"\n","\n","  q, r = divmod(q, b)\n","\n","  if r >= 10:\n","    char_str = chr(ord('A') + (r - 10))\n","  else:\n","    char_str = str(r)\n","\n","  return convert_from_dec(q, b) + char_str # 뒤집지 않기 위해\n","\n","n, b = map(int, input().split())\n","print(convert_from_dec(n, b))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["13 2\n","1101\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cSr1GCI406JX"},"source":["### recursion - map"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MbCne35W0Xoh","executionInfo":{"status":"ok","timestamp":1629268092868,"user_tz":-540,"elapsed":2455,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"64997069-cd38-4e36-d30e-d7d94596c42f"},"source":["def convert_from_dec(q, b, char_num_map):\n","  if q == 0:\n","    return \"\"\n","\n","  q, r = divmod(q, b)\n","\n","  return convert_from_dec(q, b, char_num_map) + char_num_map[r]\n","\n","char_num_map = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n","\n","n, b = map(int, input().split())\n","print(convert_from_dec(n, b, char_num_map))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["13 2\n","1101\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Y5aJkEbH1CVB"},"source":["# 탐욕 알고리즘\n","- 매 순간마다 최적으로 판단되는 선택을 이어나간다"]},{"cell_type":"markdown","metadata":{"id":"XIA7n4jP8t3C"},"source":["## 거스름돈\n","- 타로는 자주 JOI잡화점에서 물건을 산다. JOI잡화점에는 잔돈으로 500엔, 100엔, 50엔, 10엔, 5엔, 1엔이 충분히 있고, 언제나 거스름돈 개수가 가장 적게 잔돈을 준다. 타로가 JOI잡화점에서 물건을 사고 카운터에서 1000엔 지폐를 한장 냈을 때, 받을 잔돈에 포함된 잔돈의 개수를 구하는 프로그램을 작성하시오.\n","- 입력은 한줄로 이루어져있고, 타로가 지불할 돈(1 이상 1000미만의 정수) 1개가 쓰여져있다.\n","- 제출할 출력 파일은 1행으로만 되어 있다. 잔돈에 포함된 매수를 출력하시오."]},{"cell_type":"markdown","metadata":{"id":"9Bp7_ZDLG3mZ"},"source":["### iteration"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rZK_Xt7E1KeG","outputId":"4276d86a-6580-4007-c8a7-6a3c8b47d39a"},"source":["charge = int(input())\n","change = 1000 - charge\n","coins = [500, 100, 50, 10, 5, 1]\n","count = 0\n","\n","for coin in coins:\n","    count += change // coin\n","    change %= coin\n","print(count)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["50\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"HIGbp-rYG1eQ"},"source":["### recursion"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rkx8uWHwFFbQ","executionInfo":{"status":"ok","timestamp":1629270621411,"user_tz":-540,"elapsed":1491,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"28c1acdf-a18d-48fc-d171-32459b481440"},"source":["def calc_coin(change, i, coins):\n","  if i == len(coins):\n","    return 0\n","\n","  return change // coins[i] + calc_coin(change % coins[i], i+1, coins)\n","\n","charge = int(input())\n","change = 1000 - charge\n","coins = [500, 100, 50, 10, 5, 1]\n","print(calc_coin(change, 0, coins))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["50\n","6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"eOHB8VsHG6Fy"},"source":["## 회의실 배정\n","- 한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.\n","- 첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다.\n","- 첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다."]},{"cell_type":"markdown","metadata":{"id":"4e25evp621Y9"},"source":["### sol\n","- <font color=\"orange\">[ 이전 회의 끝 시간 ]과 [ 다음 회의 시작 시간 ]을 비교하여 다음 회의가 더 늦게 시작하면 회의실을 쓸 수 있다고 판정 (회의가 겹치지 않아야 하므로)</font>"]},{"cell_type":"code","metadata":{"id":"EfzFJKq7G9cG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1629874162643,"user_tz":-540,"elapsed":15103,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"0572eecf-70b3-469d-f83f-f10f24cea86c"},"source":["# 1. 회의의 최대 수 받기\n","n = int(input())\n","\n","# 2. 회의의 시작 시간, 끝 시간 받기(무작위로)\n","meet_time = []\n","\n","for _ in range(n):\n","    start_time, end_time = map(int, input().split())\n","    meet_time.append((start_time, end_time))\n","\n","meet_time.sort()\n","print(\"회의 순서 :\", meet_time)\n","\n","# 3. 사용 가능한 회의 시간 도출하기\n","meet_cnt = 1\n","prev_end_time = meet_time[0][1]\n","\n","for meet in meet_time[1:]:\n","    start_time, end_time = meet\n","\n","    if start_time >= prev_end_time:\n","        meet_cnt += 1\n","        prev_end_time = end_time\n","\n","print(\"사용 가능한 회의 수 :\", meet_cnt)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["5\n","1 10\n","1 5\n","2 9\n","3 4\n","5 9\n","회의 순서 : [(1, 5), (1, 10), (2, 9), (3, 4), (5, 9)]\n","사용 가능한 회의 수 : 2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"oN2vUPd94UxZ"},"source":["# 분할 정복법"]},{"cell_type":"markdown","metadata":{"id":"QlULOfDsFv0x"},"source":["## 수 찾기\n","- N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오."]},{"cell_type":"markdown","metadata":{"id":"ZgDMeSQAHtRT"},"source":["### iteration"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOzlDIqUFX_h","executionInfo":{"status":"ok","timestamp":1630385588931,"user_tz":-540,"elapsed":9807,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"cd658c93-6c71-4b4f-cf7c-ec1ed524599e"},"source":["def search_num(n_list, target_n):\n","    start_idx = 0\n","    end_idx = len(n_list)-1\n","    \n","    while start_idx <= end_idx:\n","\n","        mid_idx = (start_idx + end_idx) // 2\n","\n","        if target_n < n_list[mid_idx]:\n","            end_idx = mid_idx-1    \n","\n","        elif target_n > n_list[mid_idx]:\n","            start_idx = mid_idx+1\n","\n","        else:\n","            return mid_idx\n","    \n","    return -1\n","\n","n = int(input(\"숫자 개수 :\"))\n","num_list = list(map(int, input(\"숫자 입력 :\").split()))\n","num_list.sort()\n","\n","m = int(input(\"비교 숫자 개수 :\"))\n","for target_num in map(int, input(\"비교 숫자 입력 :\").split()):\n","    if search_num(num_list, target_num) >= 0:\n","        print(\"1\")\n","    else:\n","        print(\"0\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["숫자 개수 :5\n","숫자 입력 :1 3 5 7 9\n","비교 숫자 개수 :4 \n","비교 숫자 입력 :4 4 4 4\n","0\n","0\n","0\n","0\n"]}]},{"cell_type":"markdown","metadata":{"id":"2aNLfc4tix13"},"source":["### recursion"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2t8Z-lx4iuSO","executionInfo":{"status":"ok","timestamp":1630385560370,"user_tz":-540,"elapsed":12018,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"d52c4899-47ea-4d2a-901b-3e507ce32396"},"source":["def find_idx_by_b_search_recursion(target_num, num_list, start_idx, end_idx):\n","    if start_idx > end_idx:\n","        return -1\n","\n","    mid_idx = (start_idx + end_idx) // 2\n","\n","    if target_num > num_list[mid_idx]:\n","        return find_idx_by_b_search_recursion(target_num, num_list, mid_idx+1, end_idx)\n","        \n","    elif target_num < num_list[mid_idx]:\n","        return find_idx_by_b_search_recursion(target_num, num_list, start_idx, mid_idx-1)\n","\n","    return mid_idx\n","\n","n = int(input())\n","num_list = list(map(int, input().split()))\n","num_list.sort()\n","\n","m = int(input())\n","for target_num in map(int, input().split()):\n","    # if find_idx_by_b_search(target_num, num_list) >= 0:\n","    if find_idx_by_b_search_recursion(target_num, num_list, 0, n-1) >= 0:\n","        print(1)\n","    else:\n","        print(0)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","1 3 5 7 9\n","5\n","2 5 5 5 4\n","0\n","1\n","1\n","1\n","0\n"]}]},{"cell_type":"markdown","metadata":{"id":"ompfYYTJr5S_"},"source":["# 병합 정렬(Merge Sort)\n","가장 작은 단위가 될 때까지 나눠주고\n","```\n","if s_idx == e_idx: return num_list[s_idx:e_idx+1]\n","```\n","\n","합치면서 정렬\n","```\n","return combined_list + f_sorted_list[f_idx:] + b_sorted_list[b_idx:]\n","```"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aaB6eaijr_fS","executionInfo":{"status":"ok","timestamp":1630491274538,"user_tz":-540,"elapsed":8123,"user":{"displayName":"김영현","photoUrl":"","userId":"01862996594103916968"}},"outputId":"9223ba55-c147-4114-e92c-1e92d0a70a33"},"source":["def merge_sort(s_idx, e_idx, num_list):\n","  if s_idx == e_idx:\n","    return num_list[s_idx:e_idx+1]\n","\n","  m_idx = (s_idx + e_idx) // 2\n","\n","  f_sorted_list = merge_sort(s_idx, m_idx, num_list) # front\n","  b_sorted_list = merge_sort(m_idx+1, e_idx, num_list) # back\n","\n","  f_idx = 0\n","  b_idx = 0\n","  combined_list = []\n","\n","  while f_idx < len(f_sorted_list) and b_idx < len(b_sorted_list):\n","    if f_sorted_list[f_idx] < b_sorted_list[b_idx]:\n","      combined_list.append(f_sorted_list[f_idx])\n","      f_idx += 1\n","    else:\n","      combined_list.append(b_sorted_list[b_idx])\n","      b_idx += 1 \n","\n","  return combined_list + f_sorted_list[f_idx:] + b_sorted_list[b_idx:]\n","\n","n = int(input())\n","num_list = []\n","\n","for _ in range(n):\n","  num_list.append(int(input()))\n","\n","sorted_list = merge_sort(0, n-1, num_list)\n","\n","print(sorted_list)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","1\n","1\n","2\n","5\n","5\n","[1, 1, 2, 5, 5]\n"]}]},{"cell_type":"markdown","metadata":{"id":"sZZZjot3qRIz"},"source":["# 분할정복법 (색종이)\n","\n","반으로 잘라진 종이가 모두 같은 색인지 확인하고 아니면 또 반으로 자르기"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S3EruZV9qHVL","executionInfo":{"status":"ok","timestamp":1631436049439,"user_tz":-540,"elapsed":8849,"user":{"displayName":"김영현","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01862996594103916968"}},"outputId":"ea9e96b3-0c5a-498e-b55e-355e1ee4df79"},"source":["# 8\n","# 1 1 0 0 0 0 1 1\n","# 1 1 0 0 0 0 1 1\n","# 0 0 0 0 1 1 0 0\n","# 0 0 0 0 1 1 0 0\n","# 1 0 0 0 1 1 1 1\n","# 0 1 0 0 1 1 1 1\n","# 0 0 1 1 1 1 1 1\n","# 0 0 1 1 1 1 1 1\n","\n","# 1 0 1 0 1 0 1 0\n","# 0 1 0 1 0 1 0 1\n","# 1 0 1 0 1 0 1 0\n","# 0 1 0 1 0 1 0 1\n","# 1 0 1 0 1 0 1 0\n","# 0 1 0 1 0 1 0 1\n","# 1 0 1 0 1 0 1 0\n","# 0 1 0 1 0 1 0 1\n","\n","# 한 영역 내부의 색이 같은지 다른지 확인\n","def check_same_color(start_y, start_x, length, paper_map):\n","    for y in range(start_y, start_y+length):\n","        for x in range(start_x, start_x+length):\n","            if paper_map[y][x] != paper_map[start_y][start_x]:\n","                return False\n","    return True\n","\n","def split_paper(start_y, start_x, length, paper_map):\n","    # check_same_color의 결과가 True일 때, paper_map의 원소가 0이면 white, 1이면 blue라고 반환\n","    if check_same_color(start_y, start_x, length, paper_map):\n","        if paper_map[start_y][start_x] == 0:\n","            return [1, 0] # [white, blue]\n","        return [0, 1] # [white, blue]\n","    \n","    # check_same_color의 결과가 False일 때, 위를 건너뛰고 아래를 수행 (한번 더 반으로 나누는 것)\n","    total_paper_cnt = [0, 0]\n","    half_len = int(length/2)\n","    start_locs = [\n","        [start_y, start_x],\n","        [start_y, start_x+half_len],\n","        [start_y+half_len, start_x],\n","        [start_y+half_len, start_x+half_len]\n","    ]\n","\n","    # 반으로 자른 부분의 각 꼭지점에서(4개로 나눠 전체를 보는 것) 수를 집계\n","    for y, x in start_locs:\n","        white_cnt, blue_cnt = split_paper(y, x, half_len, paper_map)\n","        total_paper_cnt[0] += white_cnt\n","        total_paper_cnt[1] += blue_cnt\n","\n","    return total_paper_cnt # [전체 white 수, 전체 blue 수]\n","\n","n = int(input())\n","paper_map = []\n","\n","for _ in range(n):\n","    paper_map.append(list(map(int, input().split())))\n","\n","print(split_paper(0, 0, n, paper_map))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n","1 0 1 0\n","0 1 0 1\n","1 0 1 0\n","0 1 0 1\n","[8, 8]\n"]}]},{"cell_type":"markdown","metadata":{"id":"L0EzLlXu8_jU"},"source":["# 퀵 정렬\n","\n","한 원소(pivot_idx)를 선택한 후, 그 원소보다 작은 수의 리스트와 큰 수의 리스트를 만들어서 정렬하는 것을 재귀로 반복한다"]},{"cell_type":"code","metadata":{"id":"5yAMpSmD8_Hw"},"source":["def quicksort(num_list):\n","  if len(num_list) <= 1:\n","    return num_list\n","\n","  pivot_idx = 0\n","\n","  less_list = []\n","  more_list = []\n","\n","  for num in num_list[pivot_idx+1:]:\n","    if num < num_list[pivot_idx]:\n","      less_list.append(num)\n","    else:\n","      more_list.append(num)\n","\n","  return quicksort(less_list) + [num_list[pivot_idx]] + quicksort(more_list)\n","\n","n = int(input())\n","num_list = []\n","\n","for _ in range(n):\n","  num_list.append(int(input()))\n","\n","print(quicksort(num_list))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x_GHj3PA3GmH","executionInfo":{"status":"ok","timestamp":1631615948305,"user_tz":-540,"elapsed":10209,"user":{"displayName":"김영현","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01862996594103916968"}},"outputId":"8a27b34c-07d8-485e-b852-6cff621dcd2e"},"source":["# 5\n","# 5\n","# 4\n","# 3\n","# 2\n","# 1\n","\n","# 9\n","# 5\n","# 3\n","# 8\n","# 4\n","# 9\n","# 1\n","# 6\n","# 2\n","# 7\n","\n","# 1 3 2 4 [5] 9 6 8 7\n","# 1 2 3 4 5 6 7 8 9\n","\n","# 5 4 3 2 1\n","\n","def quicksort(start_idx, end_idx, num_list):\n","    if end_idx - start_idx + 1 <= 1:\n","        return\n","\n","    # [select pivot]\n","\n","    pivot_vals = []\n","    pivot_idxes = [\n","        start_idx,\n","        (start_idx+end_idx)//2,\n","        end_idx,\n","    ]\n","\n","    for idx in pivot_idxes:\n","        pivot_vals.append(num_list[idx])\n","    \n","    mid_val = sum(pivot_vals) - max(pivot_vals) - min(pivot_vals)\n","    mid_idx = pivot_idxes[pivot_vals.index(mid_val)] # (start_idx + end_idx) // 2\n","\n","    num_list[mid_idx], num_list[start_idx] = num_list[start_idx], num_list[mid_idx]\n","\n","    pivot_idx = start_idx\n","    f = start_idx+1\n","    r = end_idx\n","\n","    while f <= r:\n","        while num_list[r] > num_list[pivot_idx]:\n","            r -= 1\n","\n","        while f <= r and num_list[f] < num_list[pivot_idx]:\n","            f += 1\n","\n","        if f <= r:\n","            num_list[f], num_list[r] = num_list[r], num_list[f]\n","\n","    print(num_list)\n","    num_list[r], num_list[pivot_idx] = num_list[pivot_idx], num_list[r]\n","\n","    quicksort(start_idx, r-1, num_list)\n","    quicksort(r+1, end_idx, num_list)\n","\n","\n","n = int(input())\n","num_list = []\n","\n","for _ in range(n):\n","    num_list.append(int(input()))\n","\n","quicksort(0, n-1, num_list)\n","\n","for num in num_list:\n","    print(num)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["5\n","5\n","3\n","1\n","4\n","2\n","[2, 1, 3, 4, 5]\n","[1, 2, 4, 3, 5]\n","1\n","2\n","3\n","4\n","5\n"]}]}]}